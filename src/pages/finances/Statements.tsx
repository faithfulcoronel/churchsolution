import React from 'react';
import { format, parse } from 'date-fns';
import { Card, CardHeader, CardContent } from '../../components/ui2/card';
import { DateRangePickerField } from '../../components/ui2/date-range-picker-field';
import { useContributionStatements } from '../../hooks/useContributionStatements';
import { useCurrencyStore } from '../../stores/currencyStore';
import { formatCurrency } from '../../utils/currency';
import { PDFRenderer, PDFTable } from '../../components/ui2/pdf-renderer';

function Statements() {
  const { currency } = useCurrencyStore();
  const { dateRange, setDateRange, useStatements } = useContributionStatements();

  const { data: statements = [], isLoading } = useStatements(
    format(dateRange.startDate, 'yyyy-MM-dd'),
    format(dateRange.endDate, 'yyyy-MM-dd')
  );

  const pdfContent = {
    sections: [
      {
        title: `Contributions ${format(parse(dateRange.startDate, 'yyyy-MM-dd', new Date()), 'MMM d, yyyy')} - ${format(parse(dateRange.endDate, 'yyyy-MM-dd', new Date()), 'MMM d, yyyy')}`,
        content: (
          <PDFTable
            headers={['Member', 'Fund', 'Amount']}
            data={statements.map((s) => [
              `${s.first_name} ${s.last_name}`,
              s.fund_name || 'Unassigned',
              formatCurrency(Number(s.total_amount || 0), currency),
            ])}
            widths={[2, 2, 1]}
          />
        ),
      },
    ],
  };

  return (
    <div className="w-full px-4 sm:px-6 lg:px-8">
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h1 className="text-2xl font-semibold text-foreground">Contribution Statements</h1>
          <p className="mt-2 text-sm text-muted-foreground">
            Generate donation statements for your members.
          </p>
        </div>
      </div>

      <div className="mt-6">
        <Card>
          <CardHeader className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <h3 className="text-lg font-medium">Statement Data</h3>
            <DateRangePickerField
              value={{
                from: parse(dateRange.startDate, 'yyyy-MM-dd', new Date()),
                to: parse(dateRange.endDate, 'yyyy-MM-dd', new Date()),
              }}
              onChange={(range) => {
                if (range.from && range.to) {
                  setDateRange({
                    startDate: format(range.from, 'yyyy-MM-dd'),
                    endDate: format(range.to, 'yyyy-MM-dd'),
                  });
                }
              }}
              label="Date Range"
            />
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="text-center py-8">Loading...</div>
            ) : statements.length > 0 ? (
              <div className="space-y-6">
                <table className="min-w-full divide-y divide-border">
                  <thead>
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Member</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Fund</th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider">Amount</th>
                    </tr>
                  </thead>
                  <tbody className="bg-background divide-y divide-border">
                    {statements.map((s, i) => (
                      <tr key={i} className="hover:bg-muted/50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-foreground">
                          {s.first_name} {s.last_name}
                        </td>
                        <td className="px-6 py-4 text-sm text-foreground">
                          {s.fund_name || 'Unassigned'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-right font-medium">
                          {formatCurrency(Number(s.total_amount || 0), currency)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>

                <PDFRenderer
                  title="Contribution Statements"
                  content={pdfContent}
                  footer="Generated by Steward Track"
                />
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-muted-foreground">No contributions for this period.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default Statements;
